// src/pages/AdminPage.tsx
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Shield, Loader2, AlertCircle, Eye, EyeOff, Frown } from 'lucide-react'; // Removed ArchiveRestore as it's now handled in QuizCard
import { useAuthStore } from '../store/authStore';
import { useQuizStore } from '../store/quizStore';
import QuizCard from '../components/quiz/QuizCard';
import Alert from '../components/ui/Alert';
import Button from '../components/ui/Button';
import { Quiz } from '../types';

const AdminPage: React.FC = () => {
  const navigate = useNavigate();
  const { user, isInitialized } = useAuthStore();
  const { quizzes, loading, error, fetchQuizzes, updateQuizVisibility, updateQuizStatus } = useQuizStore();

  const [updateLoading, setUpdateLoading] = useState<string | null>(null);
  const [showDeleted, setShowDeleted] = useState<boolean>(false);

  useEffect(() => {
    if (isInitialized) {
      if (!user) {
        navigate('/login');
      } else if (!user.isAdmin) {
        navigate('/quizzes');
      } else {
        fetchQuizzes({ status: showDeleted ? 'all' : 'active' });
      }
    }
  }, [isInitialized, user, navigate, fetchQuizzes, showDeleted]);

  if (isInitialized && (!user || !user.isAdmin)) return null;
  if (!isInitialized) return (
    <div className="flex justify-center items-center h-screen">
      <Loader2 className="h-12 w-12 animate-spin text-sky-500" />
    </div>
  );

  const handleUpdateVisibility = async (quizId: string, currentVisibility: 'global' | 'private') => {
    const newVisibility = currentVisibility === 'global' ? 'private' : 'global';
    setUpdateLoading(quizId);
    try {
      await updateQuizVisibility(quizId, newVisibility);
      // Re-fetch only if needed, otherwise rely on optimistic update from store
      // fetchQuizzes({ status: showDeleted ? 'all' : 'active' });
    } catch (err) {
      console.error("Error toggling quiz visibility in component:", err);
      alert(`Failed to update visibility for quiz ${quizId}.`);
    } finally {
      setUpdateLoading(null);
    }
  };

  const handleToggleQuizStatus = async (quiz: Quiz) => {
    const newStatus = quiz.status === 'deleted' ? 'active' : 'deleted';
    const action = newStatus === 'active' ? 'restore' : 'mark as deleted';

    if (!window.confirm(`Are you sure you want to ${action} this quiz "${quiz.title}"?`)) {
      return;
    }

    setUpdateLoading(quiz.id);
    try {
      await updateQuizStatus(quiz.id, newStatus);
      alert(`Quiz "${quiz.title}" successfully ${action}d.`);
      // Re-fetch quizzes to ensure accurate display based on status, or rely on store update
      // fetchQuizzes({ status: showDeleted ? 'all' : 'active' });
    } catch (err) {
      console.error(`Error ${action}ing quiz:`, err);
      alert(`Failed to ${action} quiz "${quiz.title}".`);
    } finally {
      setUpdateLoading(null);
    }
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8 flex items-center">
        <Shield className="h-8 w-8 text-sky-500 mr-3" />
        <div>
          <h1 className="text-3xl font-bold text-slate-800">Admin Dashboard</h1>
        </div>
      </div>

      <div className="bg-white shadow-sm rounded-lg p-6">
        <h2 className="text-xl font-semibold text-slate-800 mb-4">Manage Quizzes</h2>
        <p className="text-slate-600 mb-6">
          Review all quizzes generated by users and admins. Toggle their visibility to make them
          public or private, and manage their status (active/deleted).
        </p>

        <div className="mb-6 flex justify-end">
          <Button
            onClick={() => setShowDeleted(!showDeleted)}
            variant="ghost"
            className="flex items-center text-slate-700 hover:text-sky-600"
          >
            {showDeleted ? (
              <>
                <EyeOff className="h-5 w-5 mr-2" /> Hide Deleted
              </>
            ) : (
              <>
                <Eye className="h-5 w-5 mr-2" /> Show Deleted
              </>
            )}
          </Button>
        </div>

        {loading && (
          <div className="flex justify-center items-center py-10">
            <Loader2 className="h-8 w-8 animate-spin text-sky-500" />
            <span className="ml-3 text-lg text-slate-600">Loading all quizzes...</span>
          </div>
        )}

        {error && (
          <Alert type="error" message={error} className="mt-4" icon={<AlertCircle className="h-5 w-5" />} />
        )}

        {!loading && !error && quizzes.length === 0 && (
          <div className="text-center py-10 text-slate-500">
            <Frown className="h-12 w-12 mx-auto mb-4 text-slate-400" />
            <p className="text-xl font-semibold mb-2">No quizzes found.</p>
            <p className="text-md">Check your filters or generate a new quiz.</p>
          </div>
        )}

        {!loading && !error && quizzes.length > 0 && (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {quizzes.map((quiz) => (
              <QuizCard
                key={quiz.id}
                quiz={quiz}
                isAdmin={true}
                onToggleVisibility={handleUpdateVisibility} // Pass the handler directly
                onToggleStatus={handleToggleQuizStatus} // Pass the handler directly
                isSoftDeleted={quiz.status === 'deleted'}
                updateLoading={updateLoading === quiz.id}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminPage;